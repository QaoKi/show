
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type ActivityZhuanPan struct {
    Id int32
    FishId int32
    Coin int32
    Prob float32
    Fee int32
    Jifen float32
    Record int32
    CountReward []*TwoIntBean
}

const TypeId_ActivityZhuanPan = 1699918552

func (*ActivityZhuanPan) GetTypeId() int32 {
    return 1699918552
}

func NewActivityZhuanPan(_buf map[string]interface{}) (_v *ActivityZhuanPan, err error) {
    _v = &ActivityZhuanPan{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["fishId"].(float64); !_ok_ { err = errors.New("fishId error"); return }; _v.FishId = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["coin"].(float64); !_ok_ { err = errors.New("coin error"); return }; _v.Coin = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["prob"].(float64); !_ok_ { err = errors.New("prob error"); return }; _v.Prob = float32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["fee"].(float64); !_ok_ { err = errors.New("fee error"); return }; _v.Fee = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["jifen"].(float64); !_ok_ { err = errors.New("jifen error"); return }; _v.Jifen = float32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["record"].(float64); !_ok_ { err = errors.New("record error"); return }; _v.Record = int32(_tempNum_) }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["countReward"].([]interface{}); !_ok_ { err = errors.New("countReward error"); return }
    
                    _v.CountReward = make([]*TwoIntBean, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ *TwoIntBean
                        { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v_ error"); return }; if _list_v_, err = NewTwoIntBean(_x_); err != nil { return } }
                        _v.CountReward = append(_v.CountReward, _list_v_)
                    }
                }

    return
}

