
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type FishInfo struct {
    FishId int32
    Name string
    Rate int32
    Speed int32
    BaseHit float32
    Buffer int32
    Immortal int32
    SpecialProb float32
    SpecialBaseHit float32
    SpecialBuffer int32
}

const TypeId_FishInfo = -468039866

func (*FishInfo) GetTypeId() int32 {
    return -468039866
}

func NewFishInfo(_buf map[string]interface{}) (_v *FishInfo, err error) {
    _v = &FishInfo{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["fishId"].(float64); !_ok_ { err = errors.New("fishId error"); return }; _v.FishId = int32(_tempNum_) }
    { var _ok_ bool; if _v.Name, _ok_ = _buf["name"].(string); !_ok_ { err = errors.New("name error"); return } }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["rate"].(float64); !_ok_ { err = errors.New("rate error"); return }; _v.Rate = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["speed"].(float64); !_ok_ { err = errors.New("speed error"); return }; _v.Speed = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["baseHit"].(float64); !_ok_ { err = errors.New("baseHit error"); return }; _v.BaseHit = float32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["buffer"].(float64); !_ok_ { err = errors.New("buffer error"); return }; _v.Buffer = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["immortal"].(float64); !_ok_ { err = errors.New("immortal error"); return }; _v.Immortal = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["specialProb"].(float64); !_ok_ { err = errors.New("specialProb error"); return }; _v.SpecialProb = float32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["specialBaseHit"].(float64); !_ok_ { err = errors.New("specialBaseHit error"); return }; _v.SpecialBaseHit = float32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["specialBuffer"].(float64); !_ok_ { err = errors.New("specialBuffer error"); return }; _v.SpecialBuffer = int32(_tempNum_) }
    return
}

