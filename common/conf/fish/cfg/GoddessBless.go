
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type GoddessBless struct {
    RoomType int32
    Prob int32
    Cond int32
    InPool float32
    Reward []*GoddessBlessRewardBean
    InitPool int32
    AddPool *TwoIntBean
    SubPoolTime *TwoIntBean
    SubPoolCount *TwoIntBean
}

const TypeId_GoddessBless = -1875952130

func (*GoddessBless) GetTypeId() int32 {
    return -1875952130
}

func NewGoddessBless(_buf map[string]interface{}) (_v *GoddessBless, err error) {
    _v = &GoddessBless{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["roomType"].(float64); !_ok_ { err = errors.New("roomType error"); return }; _v.RoomType = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["prob"].(float64); !_ok_ { err = errors.New("prob error"); return }; _v.Prob = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["cond"].(float64); !_ok_ { err = errors.New("cond error"); return }; _v.Cond = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["inPool"].(float64); !_ok_ { err = errors.New("inPool error"); return }; _v.InPool = float32(_tempNum_) }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["reward"].([]interface{}); !_ok_ { err = errors.New("reward error"); return }
    
                    _v.Reward = make([]*GoddessBlessRewardBean, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ *GoddessBlessRewardBean
                        { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v_ error"); return }; if _list_v_, err = NewGoddessBlessRewardBean(_x_); err != nil { return } }
                        _v.Reward = append(_v.Reward, _list_v_)
                    }
                }

    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["initPool"].(float64); !_ok_ { err = errors.New("initPool error"); return }; _v.InitPool = int32(_tempNum_) }
    { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _buf["addPool"].(map[string]interface{}); !_ok_ { err = errors.New("addPool error"); return }; if _v.AddPool, err = NewTwoIntBean(_x_); err != nil { return } }
    { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _buf["subPoolTime"].(map[string]interface{}); !_ok_ { err = errors.New("subPoolTime error"); return }; if _v.SubPoolTime, err = NewTwoIntBean(_x_); err != nil { return } }
    { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _buf["subPoolCount"].(map[string]interface{}); !_ok_ { err = errors.New("subPoolCount error"); return }; if _v.SubPoolCount, err = NewTwoIntBean(_x_); err != nil { return } }
    return
}

