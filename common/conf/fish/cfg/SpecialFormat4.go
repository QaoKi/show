
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type SpecialFormat4 struct {
    ScreenDirection int32
    Speed int32
    FishList []*SpecialFormat4Bean
}

const TypeId_SpecialFormat4 = -1616471996

func (*SpecialFormat4) GetTypeId() int32 {
    return -1616471996
}

func NewSpecialFormat4(_buf map[string]interface{}) (_v *SpecialFormat4, err error) {
    _v = &SpecialFormat4{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["screenDirection"].(float64); !_ok_ { err = errors.New("screenDirection error"); return }; _v.ScreenDirection = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["speed"].(float64); !_ok_ { err = errors.New("speed error"); return }; _v.Speed = int32(_tempNum_) }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["fishList"].([]interface{}); !_ok_ { err = errors.New("fishList error"); return }
    
                    _v.FishList = make([]*SpecialFormat4Bean, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ *SpecialFormat4Bean
                        { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v_ error"); return }; if _list_v_, err = NewSpecialFormat4Bean(_x_); err != nil { return } }
                        _v.FishList = append(_v.FishList, _list_v_)
                    }
                }

    return
}

