
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type GenFish struct {
    RoundId int32
    Item []*GenFishBean
}

const TypeId_GenFish = 1583573416

func (*GenFish) GetTypeId() int32 {
    return 1583573416
}

func NewGenFish(_buf map[string]interface{}) (_v *GenFish, err error) {
    _v = &GenFish{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["roundId"].(float64); !_ok_ { err = errors.New("roundId error"); return }; _v.RoundId = int32(_tempNum_) }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["item"].([]interface{}); !_ok_ { err = errors.New("item error"); return }
    
                    _v.Item = make([]*GenFishBean, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ *GenFishBean
                        { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v_ error"); return }; if _list_v_, err = NewGenFishBean(_x_); err != nil { return } }
                        _v.Item = append(_v.Item, _list_v_)
                    }
                }

    return
}

