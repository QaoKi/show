// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: slot.proto

package slot_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **********  def *******
type Stage int32

const (
	Stage__stage       Stage = 0
	Stage_NormalGame   Stage = 1
	Stage_GateOfWealth Stage = 2
	Stage_TreasureHunt Stage = 3
)

// Enum value maps for Stage.
var (
	Stage_name = map[int32]string{
		0: "_stage",
		1: "NormalGame",
		2: "GateOfWealth",
		3: "TreasureHunt",
	}
	Stage_value = map[string]int32{
		"_stage":       0,
		"NormalGame":   1,
		"GateOfWealth": 2,
		"TreasureHunt": 3,
	}
)

func (x Stage) Enum() *Stage {
	p := new(Stage)
	*p = x
	return p
}

func (x Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_slot_proto_enumTypes[0].Descriptor()
}

func (Stage) Type() protoreflect.EnumType {
	return &file_slot_proto_enumTypes[0]
}

func (x Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stage.Descriptor instead.
func (Stage) EnumDescriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{0}
}

type IntArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []int32 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *IntArray) Reset() {
	*x = IntArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntArray) ProtoMessage() {}

func (x *IntArray) ProtoReflect() protoreflect.Message {
	mi := &file_slot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntArray.ProtoReflect.Descriptor instead.
func (*IntArray) Descriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{0}
}

func (x *IntArray) GetValue() []int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type GameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin          int64       `protobuf:"varint,1,opt,name=coin,proto3" json:"coin,omitempty"`                            // 金币
	Exp           int64       `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`                              // 经验
	Stage         Stage       `protobuf:"varint,3,opt,name=stage,proto3,enum=slot.Stage" json:"stage,omitempty"`          // 当前的状态
	RoundL        int32       `protobuf:"varint,4,opt,name=roundL,proto3" json:"roundL,omitempty"`                        // 当前状态剩余的回合
	Result        []*IntArray `protobuf:"bytes,5,rep,name=result,proto3" json:"result,omitempty"`                         // 结果
	Girl          bool        `protobuf:"varint,6,opt,name=girl,proto3" json:"girl,omitempty"`                            // 是否出现小女孩
	AddScat       bool        `protobuf:"varint,7,opt,name=addScat,proto3" json:"addScat,omitempty"`                      // 是否出现scat
	Colorful      bool        `protobuf:"varint,8,opt,name=colorful,proto3" json:"colorful,omitempty"`                    // 是否出现彩钻
	ColorfulAdd   []*Point    `protobuf:"bytes,9,rep,name=colorfulAdd,proto3" json:"colorfulAdd,omitempty"`               // 彩钻带来的小钻石
	IsBigWild     bool        `protobuf:"varint,10,opt,name=isBigWild,proto3" json:"isBigWild,omitempty"`                 // 是否wild 大奖
	Diamonds      []*Point    `protobuf:"bytes,11,rep,name=diamonds,proto3" json:"diamonds,omitempty"`                    // Point[]
	Win           []*WinData  `protobuf:"bytes,12,rep,name=win,proto3" json:"win,omitempty"`                              // 可得奖的点
	TotalBonus    int64       `protobuf:"varint,13,opt,name=totalBonus,proto3" json:"totalBonus,omitempty"`               // 总奖金,小游戏结束
	TotalOdds     int32       `protobuf:"varint,14,opt,name=totalOdds,proto3" json:"totalOdds,omitempty"`                 // 总赔率,小游戏结束
	Bonus         int64       `protobuf:"varint,15,opt,name=bonus,proto3" json:"bonus,omitempty"`                         // number 单次获奖
	Odds          int32       `protobuf:"varint,16,opt,name=odds,proto3" json:"odds,omitempty"`                           // number 返奖
	GowTotalOdds  int32       `protobuf:"varint,17,opt,name=gowTotalOdds,proto3" json:"gowTotalOdds,omitempty"`           // 钻石夺宝状态下的财富之门
	GowTotalBonus int64       `protobuf:"varint,18,opt,name=gowTotalBonus,proto3" json:"gowTotalBonus,omitempty"`         // 钻石夺宝状态下的财富之门
	NextStage     Stage       `protobuf:"varint,19,opt,name=nextStage,proto3,enum=slot.Stage" json:"nextStage,omitempty"` // 下一个状态
	NextRoundL    int32       `protobuf:"varint,20,opt,name=nextRoundL,proto3" json:"nextRoundL,omitempty"`               // number
	FromStage     Stage       `protobuf:"varint,21,opt,name=fromStage,proto3,enum=slot.Stage" json:"fromStage,omitempty"` // Stage
	Round         int32       `protobuf:"varint,22,opt,name=round,proto3" json:"round,omitempty"`                         // 回合数
}

func (x *GameResult) Reset() {
	*x = GameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameResult) ProtoMessage() {}

func (x *GameResult) ProtoReflect() protoreflect.Message {
	mi := &file_slot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameResult.ProtoReflect.Descriptor instead.
func (*GameResult) Descriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{1}
}

func (x *GameResult) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *GameResult) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *GameResult) GetStage() Stage {
	if x != nil {
		return x.Stage
	}
	return Stage__stage
}

func (x *GameResult) GetRoundL() int32 {
	if x != nil {
		return x.RoundL
	}
	return 0
}

func (x *GameResult) GetResult() []*IntArray {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GameResult) GetGirl() bool {
	if x != nil {
		return x.Girl
	}
	return false
}

func (x *GameResult) GetAddScat() bool {
	if x != nil {
		return x.AddScat
	}
	return false
}

func (x *GameResult) GetColorful() bool {
	if x != nil {
		return x.Colorful
	}
	return false
}

func (x *GameResult) GetColorfulAdd() []*Point {
	if x != nil {
		return x.ColorfulAdd
	}
	return nil
}

func (x *GameResult) GetIsBigWild() bool {
	if x != nil {
		return x.IsBigWild
	}
	return false
}

func (x *GameResult) GetDiamonds() []*Point {
	if x != nil {
		return x.Diamonds
	}
	return nil
}

func (x *GameResult) GetWin() []*WinData {
	if x != nil {
		return x.Win
	}
	return nil
}

func (x *GameResult) GetTotalBonus() int64 {
	if x != nil {
		return x.TotalBonus
	}
	return 0
}

func (x *GameResult) GetTotalOdds() int32 {
	if x != nil {
		return x.TotalOdds
	}
	return 0
}

func (x *GameResult) GetBonus() int64 {
	if x != nil {
		return x.Bonus
	}
	return 0
}

func (x *GameResult) GetOdds() int32 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *GameResult) GetGowTotalOdds() int32 {
	if x != nil {
		return x.GowTotalOdds
	}
	return 0
}

func (x *GameResult) GetGowTotalBonus() int64 {
	if x != nil {
		return x.GowTotalBonus
	}
	return 0
}

func (x *GameResult) GetNextStage() Stage {
	if x != nil {
		return x.NextStage
	}
	return Stage__stage
}

func (x *GameResult) GetNextRoundL() int32 {
	if x != nil {
		return x.NextRoundL
	}
	return 0
}

func (x *GameResult) GetFromStage() Stage {
	if x != nil {
		return x.FromStage
	}
	return Stage__stage
}

func (x *GameResult) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"` // 坐标位置 列
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"` // 行 兼容老代码所以和常规的是反的
	I int32 `protobuf:"varint,3,opt,name=i,proto3" json:"i,omitempty"` // 元素id
	M int32 `protobuf:"varint,4,opt,name=m,proto3" json:"m,omitempty"` // 应该是返奖率兼容代码所以叫这个名字
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_slot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{2}
}

func (x *Point) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Point) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Point) GetI() int32 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *Point) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

type WinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int32    `protobuf:"varint,1,opt,name=itemId,proto3" json:"itemId,omitempty"` // 元素id
	Point  []*Point `protobuf:"bytes,2,rep,name=point,proto3" json:"point,omitempty"`    // 坐标
}

func (x *WinData) Reset() {
	*x = WinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinData) ProtoMessage() {}

func (x *WinData) ProtoReflect() protoreflect.Message {
	mi := &file_slot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinData.ProtoReflect.Descriptor instead.
func (*WinData) Descriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{3}
}

func (x *WinData) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *WinData) GetPoint() []*Point {
	if x != nil {
		return x.Point
	}
	return nil
}

type ItemConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Img string `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *ItemConf) Reset() {
	*x = ItemConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemConf) ProtoMessage() {}

func (x *ItemConf) ProtoReflect() protoreflect.Message {
	mi := &file_slot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemConf.ProtoReflect.Descriptor instead.
func (*ItemConf) Descriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{4}
}

func (x *ItemConf) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemConf) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

// 开始游戏
type ReqGameStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqGameStart) Reset() {
	*x = ReqGameStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGameStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGameStart) ProtoMessage() {}

func (x *ReqGameStart) ProtoReflect() protoreflect.Message {
	mi := &file_slot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGameStart.ProtoReflect.Descriptor instead.
func (*ReqGameStart) Descriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{5}
}

type RetGameStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage         Stage       `protobuf:"varint,1,opt,name=stage,proto3,enum=slot.Stage" json:"stage,omitempty"`         // 当前游戏状态
	RoundL        int32       `protobuf:"varint,2,opt,name=roundL,proto3" json:"roundL,omitempty"`                       // 当前状态剩余长度
	FromStage     Stage       `protobuf:"varint,3,opt,name=fromStage,proto3,enum=slot.Stage" json:"fromStage,omitempty"` // 来源状态
	Coin          int64       `protobuf:"varint,6,opt,name=coin,proto3" json:"coin,omitempty"`                           // 金币
	Exp           int64       `protobuf:"varint,7,opt,name=exp,proto3" json:"exp,omitempty"`                             // 经验
	Round         int32       `protobuf:"varint,8,opt,name=round,proto3" json:"round,omitempty"`                         // 回合
	GowTotalOdds  int32       `protobuf:"varint,9,opt,name=gowTotalOdds,proto3" json:"gowTotalOdds,omitempty"`
	GowTotalBonus int64       `protobuf:"varint,10,opt,name=gowTotalBonus,proto3" json:"gowTotalBonus,omitempty"`
	Result        []*IntArray `protobuf:"bytes,11,rep,name=result,proto3" json:"result,omitempty"`     // 结果
	Diamonds      []*Point    `protobuf:"bytes,12,rep,name=diamonds,proto3" json:"diamonds,omitempty"` // Point[]
	Elements      []*ItemConf `protobuf:"bytes,13,rep,name=elements,proto3" json:"elements,omitempty"`
	Ante          int64       `protobuf:"varint,14,opt,name=ante,proto3" json:"ante,omitempty"` // 投注
	TotalOdds     int32       `protobuf:"varint,15,opt,name=totalOdds,proto3" json:"totalOdds,omitempty"`
	TotalBonus    int64       `protobuf:"varint,16,opt,name=totalBonus,proto3" json:"totalBonus,omitempty"`
	MachineId     int32       `protobuf:"varint,17,opt,name=machineId,proto3" json:"machineId,omitempty"`     // 机台Id，默认值为 当前用户数 + 100 (uid 中间的值)
	NotWinRound   int32       `protobuf:"varint,18,opt,name=notWinRound,proto3" json:"notWinRound,omitempty"` // 未中大奖的轮次
}

func (x *RetGameStart) Reset() {
	*x = RetGameStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetGameStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetGameStart) ProtoMessage() {}

func (x *RetGameStart) ProtoReflect() protoreflect.Message {
	mi := &file_slot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetGameStart.ProtoReflect.Descriptor instead.
func (*RetGameStart) Descriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{6}
}

func (x *RetGameStart) GetStage() Stage {
	if x != nil {
		return x.Stage
	}
	return Stage__stage
}

func (x *RetGameStart) GetRoundL() int32 {
	if x != nil {
		return x.RoundL
	}
	return 0
}

func (x *RetGameStart) GetFromStage() Stage {
	if x != nil {
		return x.FromStage
	}
	return Stage__stage
}

func (x *RetGameStart) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RetGameStart) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *RetGameStart) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RetGameStart) GetGowTotalOdds() int32 {
	if x != nil {
		return x.GowTotalOdds
	}
	return 0
}

func (x *RetGameStart) GetGowTotalBonus() int64 {
	if x != nil {
		return x.GowTotalBonus
	}
	return 0
}

func (x *RetGameStart) GetResult() []*IntArray {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RetGameStart) GetDiamonds() []*Point {
	if x != nil {
		return x.Diamonds
	}
	return nil
}

func (x *RetGameStart) GetElements() []*ItemConf {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *RetGameStart) GetAnte() int64 {
	if x != nil {
		return x.Ante
	}
	return 0
}

func (x *RetGameStart) GetTotalOdds() int32 {
	if x != nil {
		return x.TotalOdds
	}
	return 0
}

func (x *RetGameStart) GetTotalBonus() int64 {
	if x != nil {
		return x.TotalBonus
	}
	return 0
}

func (x *RetGameStart) GetMachineId() int32 {
	if x != nil {
		return x.MachineId
	}
	return 0
}

func (x *RetGameStart) GetNotWinRound() int32 {
	if x != nil {
		return x.NotWinRound
	}
	return 0
}

// 结束游戏
type ReqGameStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqGameStop) Reset() {
	*x = ReqGameStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGameStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGameStop) ProtoMessage() {}

func (x *ReqGameStop) ProtoReflect() protoreflect.Message {
	mi := &file_slot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGameStop.ProtoReflect.Descriptor instead.
func (*ReqGameStop) Descriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{7}
}

type RetGameStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RetGameStop) Reset() {
	*x = RetGameStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetGameStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetGameStop) ProtoMessage() {}

func (x *RetGameStop) ProtoReflect() protoreflect.Message {
	mi := &file_slot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetGameStop.ProtoReflect.Descriptor instead.
func (*RetGameStop) Descriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{8}
}

// 摇奖
type ReqSlotPlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ante int64 `protobuf:"varint,1,opt,name=ante,proto3" json:"ante,omitempty"` // 下注
}

func (x *ReqSlotPlay) Reset() {
	*x = ReqSlotPlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSlotPlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSlotPlay) ProtoMessage() {}

func (x *ReqSlotPlay) ProtoReflect() protoreflect.Message {
	mi := &file_slot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSlotPlay.ProtoReflect.Descriptor instead.
func (*ReqSlotPlay) Descriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{9}
}

func (x *ReqSlotPlay) GetAnte() int64 {
	if x != nil {
		return x.Ante
	}
	return 0
}

type RetSlotPlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin        int64       `protobuf:"varint,1,opt,name=coin,proto3" json:"coin,omitempty"`                   // 金币
	Exp         int64       `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`                     // 经验
	Stage       Stage       `protobuf:"varint,3,opt,name=stage,proto3,enum=slot.Stage" json:"stage,omitempty"` // 当前的状态
	RoundL      int32       `protobuf:"varint,4,opt,name=roundL,proto3" json:"roundL,omitempty"`               // 当前状态剩余的回合
	Result      []*IntArray `protobuf:"bytes,5,rep,name=result,proto3" json:"result,omitempty"`                // 结果
	Girl        bool        `protobuf:"varint,6,opt,name=girl,proto3" json:"girl,omitempty"`                   // 是否出现小女孩
	AddScat     bool        `protobuf:"varint,7,opt,name=addScat,proto3" json:"addScat,omitempty"`             // 是否出现scat
	Colorful    bool        `protobuf:"varint,8,opt,name=colorful,proto3" json:"colorful,omitempty"`           // 是否出现彩钻
	ColorfulAdd []*Point    `protobuf:"bytes,9,rep,name=colorfulAdd,proto3" json:"colorfulAdd,omitempty"`      // 彩钻带来的小钻石
	IsBigWild   bool        `protobuf:"varint,10,opt,name=isBigWild,proto3" json:"isBigWild,omitempty"`        // 是否wild 大奖
	Diamonds    []*Point    `protobuf:"bytes,11,rep,name=diamonds,proto3" json:"diamonds,omitempty"`           // Point[]
	// 得奖结果：
	Win           []*WinData `protobuf:"bytes,12,rep,name=win,proto3" json:"win,omitempty"`                              // 可得奖的点
	TotalBonus    int64      `protobuf:"varint,13,opt,name=totalBonus,proto3" json:"totalBonus,omitempty"`               // 总奖金,小游戏结束
	TotalOdds     int32      `protobuf:"varint,14,opt,name=totalOdds,proto3" json:"totalOdds,omitempty"`                 // 总赔率,小游戏结束 (10000 * 100)
	Bonus         int64      `protobuf:"varint,15,opt,name=bonus,proto3" json:"bonus,omitempty"`                         // number 单次获奖
	Odds          int32      `protobuf:"varint,16,opt,name=odds,proto3" json:"odds,omitempty"`                           // number 返奖
	NextStage     Stage      `protobuf:"varint,19,opt,name=nextStage,proto3,enum=slot.Stage" json:"nextStage,omitempty"` // 下一个状态
	NextRoundL    int32      `protobuf:"varint,20,opt,name=nextRoundL,proto3" json:"nextRoundL,omitempty"`               // number
	FromStage     Stage      `protobuf:"varint,21,opt,name=fromStage,proto3,enum=slot.Stage" json:"fromStage,omitempty"` // Stage
	Round         int32      `protobuf:"varint,22,opt,name=round,proto3" json:"round,omitempty"`                         // 回合数
	GowTotalOdds  int32      `protobuf:"varint,23,opt,name=gowTotalOdds,proto3" json:"gowTotalOdds,omitempty"`           // 钻石夺宝状态下的财富之门
	GowTotalBonus int64      `protobuf:"varint,24,opt,name=gowTotalBonus,proto3" json:"gowTotalBonus,omitempty"`         // 钻石夺宝状态下的财富之门
	MachineId     int32      `protobuf:"varint,25,opt,name=machineId,proto3" json:"machineId,omitempty"`                 // 机台Id，默认值为 当前用户数 + 100 (uid 中间的值)
	NotWinRound   int32      `protobuf:"varint,26,opt,name=notWinRound,proto3" json:"notWinRound,omitempty"`             // 未中大奖的轮次
}

func (x *RetSlotPlay) Reset() {
	*x = RetSlotPlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetSlotPlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetSlotPlay) ProtoMessage() {}

func (x *RetSlotPlay) ProtoReflect() protoreflect.Message {
	mi := &file_slot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetSlotPlay.ProtoReflect.Descriptor instead.
func (*RetSlotPlay) Descriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{10}
}

func (x *RetSlotPlay) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RetSlotPlay) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *RetSlotPlay) GetStage() Stage {
	if x != nil {
		return x.Stage
	}
	return Stage__stage
}

func (x *RetSlotPlay) GetRoundL() int32 {
	if x != nil {
		return x.RoundL
	}
	return 0
}

func (x *RetSlotPlay) GetResult() []*IntArray {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RetSlotPlay) GetGirl() bool {
	if x != nil {
		return x.Girl
	}
	return false
}

func (x *RetSlotPlay) GetAddScat() bool {
	if x != nil {
		return x.AddScat
	}
	return false
}

func (x *RetSlotPlay) GetColorful() bool {
	if x != nil {
		return x.Colorful
	}
	return false
}

func (x *RetSlotPlay) GetColorfulAdd() []*Point {
	if x != nil {
		return x.ColorfulAdd
	}
	return nil
}

func (x *RetSlotPlay) GetIsBigWild() bool {
	if x != nil {
		return x.IsBigWild
	}
	return false
}

func (x *RetSlotPlay) GetDiamonds() []*Point {
	if x != nil {
		return x.Diamonds
	}
	return nil
}

func (x *RetSlotPlay) GetWin() []*WinData {
	if x != nil {
		return x.Win
	}
	return nil
}

func (x *RetSlotPlay) GetTotalBonus() int64 {
	if x != nil {
		return x.TotalBonus
	}
	return 0
}

func (x *RetSlotPlay) GetTotalOdds() int32 {
	if x != nil {
		return x.TotalOdds
	}
	return 0
}

func (x *RetSlotPlay) GetBonus() int64 {
	if x != nil {
		return x.Bonus
	}
	return 0
}

func (x *RetSlotPlay) GetOdds() int32 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *RetSlotPlay) GetNextStage() Stage {
	if x != nil {
		return x.NextStage
	}
	return Stage__stage
}

func (x *RetSlotPlay) GetNextRoundL() int32 {
	if x != nil {
		return x.NextRoundL
	}
	return 0
}

func (x *RetSlotPlay) GetFromStage() Stage {
	if x != nil {
		return x.FromStage
	}
	return Stage__stage
}

func (x *RetSlotPlay) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RetSlotPlay) GetGowTotalOdds() int32 {
	if x != nil {
		return x.GowTotalOdds
	}
	return 0
}

func (x *RetSlotPlay) GetGowTotalBonus() int64 {
	if x != nil {
		return x.GowTotalBonus
	}
	return 0
}

func (x *RetSlotPlay) GetMachineId() int32 {
	if x != nil {
		return x.MachineId
	}
	return 0
}

func (x *RetSlotPlay) GetNotWinRound() int32 {
	if x != nil {
		return x.NotWinRound
	}
	return 0
}

// 购买特殊玩法
type ReqSlotPayMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ante  int64 `protobuf:"varint,1,opt,name=ante,proto3" json:"ante,omitempty"`                   // 底注
	Stage Stage `protobuf:"varint,2,opt,name=stage,proto3,enum=slot.Stage" json:"stage,omitempty"` // 购买的玩法
}

func (x *ReqSlotPayMode) Reset() {
	*x = ReqSlotPayMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSlotPayMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSlotPayMode) ProtoMessage() {}

func (x *ReqSlotPayMode) ProtoReflect() protoreflect.Message {
	mi := &file_slot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSlotPayMode.ProtoReflect.Descriptor instead.
func (*ReqSlotPayMode) Descriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{11}
}

func (x *ReqSlotPayMode) GetAnte() int64 {
	if x != nil {
		return x.Ante
	}
	return 0
}

func (x *ReqSlotPayMode) GetStage() Stage {
	if x != nil {
		return x.Stage
	}
	return Stage__stage
}

type RetSlotPayMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin int64 `protobuf:"varint,1,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (x *RetSlotPayMode) Reset() {
	*x = RetSlotPayMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetSlotPayMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetSlotPayMode) ProtoMessage() {}

func (x *RetSlotPayMode) ProtoReflect() protoreflect.Message {
	mi := &file_slot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetSlotPayMode.ProtoReflect.Descriptor instead.
func (*RetSlotPayMode) Descriptor() ([]byte, []int) {
	return file_slot_proto_rawDescGZIP(), []int{12}
}

func (x *RetSlotPayMode) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

var File_slot_proto protoreflect.FileDescriptor

var file_slot_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x22, 0x20, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x05, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x4c, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x69, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x67, 0x69, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x53, 0x63, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x61, 0x64, 0x64, 0x53, 0x63, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x12, 0x2d, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66,
	0x75, 0x6c, 0x41, 0x64, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x6c,
	0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66,
	0x75, 0x6c, 0x41, 0x64, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x69, 0x67, 0x57, 0x69,
	0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x69, 0x67, 0x57,
	0x69, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x03,
	0x77, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x6c, 0x6f, 0x74,
	0x2e, 0x57, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x6f, 0x77,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x77,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x67, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12,
	0x29, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x3f, 0x0a, 0x05, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x69, 0x12, 0x0c,
	0x0a, 0x01, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6d, 0x22, 0x44, 0x0a, 0x07,
	0x57, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67,
	0x22, 0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x22, 0x89, 0x04, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x12, 0x29, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x78, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f,
	0x64, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x6f, 0x77, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x77, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x67, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2a,
	0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6e,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x61, 0x6e, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f,
	0x74, 0x57, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6e, 0x6f, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x0d, 0x0a, 0x0b,
	0x52, 0x65, 0x71, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x22, 0x0d, 0x0a, 0x0b, 0x52,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x22, 0x21, 0x0a, 0x0b, 0x52, 0x65,
	0x71, 0x53, 0x6c, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6e, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x61, 0x6e, 0x74, 0x65, 0x22, 0xf5, 0x05,
	0x0a, 0x0b, 0x52, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x65, 0x78, 0x70, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x12, 0x26,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x69, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x67, 0x69, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x53, 0x63, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x53, 0x63, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c,
	0x12, 0x2d, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x41, 0x64, 0x64, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x41, 0x64, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6c, 0x64, 0x12, 0x27, 0x0a,
	0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4f, 0x64, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f,
	0x64, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12,
	0x29, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x73, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x67,
	0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x67, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x64, 0x64, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x67, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x57, 0x69, 0x6e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x47, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x53, 0x6c, 0x6f, 0x74,
	0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6e, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x61, 0x6e, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x73, 0x6c, 0x6f,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x22, 0x24,
	0x0a, 0x0e, 0x52, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x2a, 0x47, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x61, 0x74,
	0x65, 0x4f, 0x66, 0x57, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x10, 0x03, 0x42, 0x20, 0x5a,
	0x1e, 0x62, 0x79, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_slot_proto_rawDescOnce sync.Once
	file_slot_proto_rawDescData = file_slot_proto_rawDesc
)

func file_slot_proto_rawDescGZIP() []byte {
	file_slot_proto_rawDescOnce.Do(func() {
		file_slot_proto_rawDescData = protoimpl.X.CompressGZIP(file_slot_proto_rawDescData)
	})
	return file_slot_proto_rawDescData
}

var file_slot_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_slot_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_slot_proto_goTypes = []interface{}{
	(Stage)(0),             // 0: slot.Stage
	(*IntArray)(nil),       // 1: slot.IntArray
	(*GameResult)(nil),     // 2: slot.GameResult
	(*Point)(nil),          // 3: slot.Point
	(*WinData)(nil),        // 4: slot.WinData
	(*ItemConf)(nil),       // 5: slot.ItemConf
	(*ReqGameStart)(nil),   // 6: slot.ReqGameStart
	(*RetGameStart)(nil),   // 7: slot.RetGameStart
	(*ReqGameStop)(nil),    // 8: slot.ReqGameStop
	(*RetGameStop)(nil),    // 9: slot.RetGameStop
	(*ReqSlotPlay)(nil),    // 10: slot.ReqSlotPlay
	(*RetSlotPlay)(nil),    // 11: slot.RetSlotPlay
	(*ReqSlotPayMode)(nil), // 12: slot.ReqSlotPayMode
	(*RetSlotPayMode)(nil), // 13: slot.RetSlotPayMode
}
var file_slot_proto_depIdxs = []int32{
	0,  // 0: slot.GameResult.stage:type_name -> slot.Stage
	1,  // 1: slot.GameResult.result:type_name -> slot.IntArray
	3,  // 2: slot.GameResult.colorfulAdd:type_name -> slot.Point
	3,  // 3: slot.GameResult.diamonds:type_name -> slot.Point
	4,  // 4: slot.GameResult.win:type_name -> slot.WinData
	0,  // 5: slot.GameResult.nextStage:type_name -> slot.Stage
	0,  // 6: slot.GameResult.fromStage:type_name -> slot.Stage
	3,  // 7: slot.WinData.point:type_name -> slot.Point
	0,  // 8: slot.RetGameStart.stage:type_name -> slot.Stage
	0,  // 9: slot.RetGameStart.fromStage:type_name -> slot.Stage
	1,  // 10: slot.RetGameStart.result:type_name -> slot.IntArray
	3,  // 11: slot.RetGameStart.diamonds:type_name -> slot.Point
	5,  // 12: slot.RetGameStart.elements:type_name -> slot.ItemConf
	0,  // 13: slot.RetSlotPlay.stage:type_name -> slot.Stage
	1,  // 14: slot.RetSlotPlay.result:type_name -> slot.IntArray
	3,  // 15: slot.RetSlotPlay.colorfulAdd:type_name -> slot.Point
	3,  // 16: slot.RetSlotPlay.diamonds:type_name -> slot.Point
	4,  // 17: slot.RetSlotPlay.win:type_name -> slot.WinData
	0,  // 18: slot.RetSlotPlay.nextStage:type_name -> slot.Stage
	0,  // 19: slot.RetSlotPlay.fromStage:type_name -> slot.Stage
	0,  // 20: slot.ReqSlotPayMode.stage:type_name -> slot.Stage
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_slot_proto_init() }
func file_slot_proto_init() {
	if File_slot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_slot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGameStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetGameStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGameStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetGameStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSlotPlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetSlotPlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSlotPayMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetSlotPayMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_slot_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_slot_proto_goTypes,
		DependencyIndexes: file_slot_proto_depIdxs,
		EnumInfos:         file_slot_proto_enumTypes,
		MessageInfos:      file_slot_proto_msgTypes,
	}.Build()
	File_slot_proto = out.File
	file_slot_proto_rawDesc = nil
	file_slot_proto_goTypes = nil
	file_slot_proto_depIdxs = nil
}
