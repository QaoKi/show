// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: common.proto

package common_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CmdId int32

const (
	CmdId__cmdId        CmdId = 0
	CmdId_UserKeepAlive CmdId = 10001 // 心跳
	CmdId_UserJoinRoom  CmdId = 10002 // 玩家加入房间
	CmdId_StartMatch    CmdId = 10003 // 开始匹配
	CmdId_StopMatch     CmdId = 10004 // 停止匹配
	CmdId_GetRoomInfo   CmdId = 10005 // 获取房间信息
	CmdId_UserQuitRoom  CmdId = 10006 // 玩家退出
	CmdId_GameStart     CmdId = 10007 // 游戏开始
	CmdId_GameStop      CmdId = 10008 // 游戏结束
	// ************************************  捕鱼  ***************************
	CmdId_FishPlay                CmdId = 20000 // 开炮
	CmdId_EventFishPlay           CmdId = 20001
	CmdId_EventFishGenFish        CmdId = 20003 // 创建鱼后推送给客户端
	CmdId_FishChangeGun           CmdId = 20004 // 切换炮台
	CmdId_EventFishChangeGun      CmdId = 20005
	CmdId_FishHit                 CmdId = 20006 // 击中
	CmdId_EventFishHit            CmdId = 20007
	CmdId_FishKill                CmdId = 20008 // 击杀
	CmdId_EventFishKill           CmdId = 20009
	CmdId_EventFishUserJoinRoom   CmdId = 20010 // 推送玩家进入房间消息
	CmdId_EventFishUserQuitRoom   CmdId = 20011 // 推送玩家退出房间消息
	CmdId_EventFishUserDisConnect CmdId = 20012 // 推送玩家断线消息
	CmdId_EventFishUserReConnect  CmdId = 20013 // 推送玩家重连消息
	// ********* 小游戏 **********8
	CmdId_EventFishAddZhenZhu           CmdId = 20100 // 玩家获得珍珠
	CmdId_EventFishAddLaBaBuffer        CmdId = 20101 // 玩家触发拉霸小游戏
	CmdId_FishPlayLaBa                  CmdId = 20102 // 玩家玩拉霸小游戏
	CmdId_EventFishLaBaResult           CmdId = 20103 // 广播拉霸结果
	CmdId_EventFishBingDongBuffer       CmdId = 20104 // 触发冰冻
	CmdId_EventFishAddBufferZhuanPan    CmdId = 20105 // 触发buffer转盘
	CmdId_FishPlayBufferZhuanPan        CmdId = 20106 // 玩家玩buffer转盘
	CmdId_EventFishBufferZhuanPanResult CmdId = 20107 // 广播buffer转盘的结果
	CmdId_EventFishAddMoGuBuffer        CmdId = 20108 // 触发蘑菇庄园
	CmdId_FishPlayMoGu                  CmdId = 20109 // 玩家玩蘑菇庄园
	CmdId_EventFishMoGuResult           CmdId = 20110 // 广播蘑菇庄园的结果
	CmdId_EventFishAddJinChanBuffer     CmdId = 20111 // 触发金蟾
	CmdId_EventFishAddAthenaBuffer      CmdId = 20112 // 触发雅典娜
	CmdId_EventFishAddPoseidonBuffer    CmdId = 20113 // 触发波塞冬
	CmdId_EventFishAddHardessBuffer     CmdId = 20114 // 触发哈迪斯
	CmdId_FishGetActivityZhuanPanInfo   CmdId = 20115 // 获取activity转盘数据
	CmdId_FishPlayActivityZhuanPan      CmdId = 20116 // 玩activity转盘
	CmdId_FishGetActivityZhuanPanReward CmdId = 20117 // 获取次数奖励
	CmdId_FishGetGodBlessInfo           CmdId = 20118 // 获取女神赐福信息
	CmdId_FishGetGodBlessReward         CmdId = 20119 // 领奖
	CmdId_EventFishChangeGodBlessPool   CmdId = 20120 // 女神赐福奖池变化
	CmdId_EventFishTouchGodBless        CmdId = 20121 // 触发女神赐福
	CmdId_FishComboRewardInfo           CmdId = 20122 // 连击奖励信息
	CmdId_FishGetComboReward            CmdId = 20123 // 获取连击奖励
	CmdId_EventFishComboReward          CmdId = 20124 // 有连击奖励了通知一下本人
	// ************************************* slot *************************
	CmdId_SlotPlay    CmdId = 30000 // 摇奖
	CmdId_SlotPayMode CmdId = 30002 // 购买特殊玩法
)

// Enum value maps for CmdId.
var (
	CmdId_name = map[int32]string{
		0:     "_cmdId",
		10001: "UserKeepAlive",
		10002: "UserJoinRoom",
		10003: "StartMatch",
		10004: "StopMatch",
		10005: "GetRoomInfo",
		10006: "UserQuitRoom",
		10007: "GameStart",
		10008: "GameStop",
		20000: "FishPlay",
		20001: "EventFishPlay",
		20003: "EventFishGenFish",
		20004: "FishChangeGun",
		20005: "EventFishChangeGun",
		20006: "FishHit",
		20007: "EventFishHit",
		20008: "FishKill",
		20009: "EventFishKill",
		20010: "EventFishUserJoinRoom",
		20011: "EventFishUserQuitRoom",
		20012: "EventFishUserDisConnect",
		20013: "EventFishUserReConnect",
		20100: "EventFishAddZhenZhu",
		20101: "EventFishAddLaBaBuffer",
		20102: "FishPlayLaBa",
		20103: "EventFishLaBaResult",
		20104: "EventFishBingDongBuffer",
		20105: "EventFishAddBufferZhuanPan",
		20106: "FishPlayBufferZhuanPan",
		20107: "EventFishBufferZhuanPanResult",
		20108: "EventFishAddMoGuBuffer",
		20109: "FishPlayMoGu",
		20110: "EventFishMoGuResult",
		20111: "EventFishAddJinChanBuffer",
		20112: "EventFishAddAthenaBuffer",
		20113: "EventFishAddPoseidonBuffer",
		20114: "EventFishAddHardessBuffer",
		20115: "FishGetActivityZhuanPanInfo",
		20116: "FishPlayActivityZhuanPan",
		20117: "FishGetActivityZhuanPanReward",
		20118: "FishGetGodBlessInfo",
		20119: "FishGetGodBlessReward",
		20120: "EventFishChangeGodBlessPool",
		20121: "EventFishTouchGodBless",
		20122: "FishComboRewardInfo",
		20123: "FishGetComboReward",
		20124: "EventFishComboReward",
		30000: "SlotPlay",
		30002: "SlotPayMode",
	}
	CmdId_value = map[string]int32{
		"_cmdId":                        0,
		"UserKeepAlive":                 10001,
		"UserJoinRoom":                  10002,
		"StartMatch":                    10003,
		"StopMatch":                     10004,
		"GetRoomInfo":                   10005,
		"UserQuitRoom":                  10006,
		"GameStart":                     10007,
		"GameStop":                      10008,
		"FishPlay":                      20000,
		"EventFishPlay":                 20001,
		"EventFishGenFish":              20003,
		"FishChangeGun":                 20004,
		"EventFishChangeGun":            20005,
		"FishHit":                       20006,
		"EventFishHit":                  20007,
		"FishKill":                      20008,
		"EventFishKill":                 20009,
		"EventFishUserJoinRoom":         20010,
		"EventFishUserQuitRoom":         20011,
		"EventFishUserDisConnect":       20012,
		"EventFishUserReConnect":        20013,
		"EventFishAddZhenZhu":           20100,
		"EventFishAddLaBaBuffer":        20101,
		"FishPlayLaBa":                  20102,
		"EventFishLaBaResult":           20103,
		"EventFishBingDongBuffer":       20104,
		"EventFishAddBufferZhuanPan":    20105,
		"FishPlayBufferZhuanPan":        20106,
		"EventFishBufferZhuanPanResult": 20107,
		"EventFishAddMoGuBuffer":        20108,
		"FishPlayMoGu":                  20109,
		"EventFishMoGuResult":           20110,
		"EventFishAddJinChanBuffer":     20111,
		"EventFishAddAthenaBuffer":      20112,
		"EventFishAddPoseidonBuffer":    20113,
		"EventFishAddHardessBuffer":     20114,
		"FishGetActivityZhuanPanInfo":   20115,
		"FishPlayActivityZhuanPan":      20116,
		"FishGetActivityZhuanPanReward": 20117,
		"FishGetGodBlessInfo":           20118,
		"FishGetGodBlessReward":         20119,
		"EventFishChangeGodBlessPool":   20120,
		"EventFishTouchGodBless":        20121,
		"FishComboRewardInfo":           20122,
		"FishGetComboReward":            20123,
		"EventFishComboReward":          20124,
		"SlotPlay":                      30000,
		"SlotPayMode":                   30002,
	}
)

func (x CmdId) Enum() *CmdId {
	p := new(CmdId)
	*p = x
	return p
}

func (x CmdId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdId) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (CmdId) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x CmdId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdId.Descriptor instead.
func (CmdId) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type ErrorCode int32

const (
	ErrorCode_Succ ErrorCode = 0
	ErrorCode_Fail ErrorCode = 1
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "Succ",
		1: "Fail",
	}
	ErrorCode_value = map[string]int32{
		"Succ": 0,
		"Fail": 1,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type RewardStatus int32

const (
	RewardStatus_NotAvailable RewardStatus = 0 // 不能领奖
	RewardStatus_Available    RewardStatus = 1 // 可以领奖
	RewardStatus_Got          RewardStatus = 2 // 已经领过
)

// Enum value maps for RewardStatus.
var (
	RewardStatus_name = map[int32]string{
		0: "NotAvailable",
		1: "Available",
		2: "Got",
	}
	RewardStatus_value = map[string]int32{
		"NotAvailable": 0,
		"Available":    1,
		"Got":          2,
	}
)

func (x RewardStatus) Enum() *RewardStatus {
	p := new(RewardStatus)
	*p = x
	return p
}

func (x RewardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (RewardStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x RewardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RewardStatus.Descriptor instead.
func (RewardStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type ReqUserKeepAlive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqUserKeepAlive) Reset() {
	*x = ReqUserKeepAlive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserKeepAlive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserKeepAlive) ProtoMessage() {}

func (x *ReqUserKeepAlive) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserKeepAlive.ProtoReflect.Descriptor instead.
func (*ReqUserKeepAlive) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type RetUserKeepAlive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrTime int64 `protobuf:"varint,1,opt,name=currTime,proto3" json:"currTime,omitempty"`
}

func (x *RetUserKeepAlive) Reset() {
	*x = RetUserKeepAlive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetUserKeepAlive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetUserKeepAlive) ProtoMessage() {}

func (x *RetUserKeepAlive) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetUserKeepAlive.ProtoReflect.Descriptor instead.
func (*RetUserKeepAlive) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *RetUserKeepAlive) GetCurrTime() int64 {
	if x != nil {
		return x.CurrTime
	}
	return 0
}

type BaseCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdId int32  `protobuf:"varint,1,opt,name=cmdId,proto3" json:"cmdId,omitempty"` // 消息号
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`    // 消息体
	ReqId int32  `protobuf:"varint,3,opt,name=reqId,proto3" json:"reqId,omitempty"` // 请求号 做请求响应使用,服务器需要响应消息里放同样的reqId
	Code  int32  `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`   // 错误id 0 正常响应其他是错误
	Mid   string `protobuf:"bytes,5,opt,name=mid,proto3" json:"mid,omitempty"`      // mid 网关和游戏服互发消息时候需要写入
}

func (x *BaseCmd) Reset() {
	*x = BaseCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseCmd) ProtoMessage() {}

func (x *BaseCmd) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseCmd.ProtoReflect.Descriptor instead.
func (*BaseCmd) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *BaseCmd) GetCmdId() int32 {
	if x != nil {
		return x.CmdId
	}
	return 0
}

func (x *BaseCmd) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BaseCmd) GetReqId() int32 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *BaseCmd) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BaseCmd) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid        string `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Uid        string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`                // 玩家uid
	NickName   string `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName,omitempty"`      // 玩家昵称
	Coin       int64  `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`             // 玩家持有金币
	Avatar     string `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`          // 玩家头像
	Gender     int32  `protobuf:"varint,6,opt,name=gender,proto3" json:"gender,omitempty"`         // 0 未知 1 男 2 女
	Exp        int32  `protobuf:"varint,7,opt,name=exp,proto3" json:"exp,omitempty"`               // 经验值
	CoinOffset int64  `protobuf:"varint,8,opt,name=coinOffset,proto3" json:"coinOffset,omitempty"` // 金币变动
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *UserInfo) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *UserInfo) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *UserInfo) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *UserInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfo) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *UserInfo) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *UserInfo) GetCoinOffset() int64 {
	if x != nil {
		return x.CoinOffset
	}
	return 0
}

// 道具
type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType  int32 `protobuf:"varint,1,opt,name=itemType,proto3" json:"itemType,omitempty"`
	ItemCount int64 `protobuf:"varint,2,opt,name=itemCount,proto3" json:"itemCount,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *Item) GetItemType() int32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *Item) GetItemCount() int64 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65,
	0x72, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x2e, 0x0a, 0x10, 0x52, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x07, 0x42, 0x61,
	0x73, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x78, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x40,
	0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x2a, 0xdc, 0x09, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x5f, 0x63,
	0x6d, 0x64, 0x49, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x10, 0x91, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x92, 0x4e, 0x12, 0x0f, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x93, 0x4e, 0x12, 0x0e,
	0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x94, 0x4e, 0x12, 0x10,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x95, 0x4e,
	0x12, 0x11, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x10, 0x96, 0x4e, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x10, 0x97, 0x4e, 0x12, 0x0d, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x10,
	0x98, 0x4e, 0x12, 0x0e, 0x0a, 0x08, 0x46, 0x69, 0x73, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x10, 0xa0,
	0x9c, 0x01, 0x12, 0x13, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x73, 0x68, 0x50,
	0x6c, 0x61, 0x79, 0x10, 0xa1, 0x9c, 0x01, 0x12, 0x16, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x73, 0x68, 0x47, 0x65, 0x6e, 0x46, 0x69, 0x73, 0x68, 0x10, 0xa3, 0x9c, 0x01, 0x12,
	0x13, 0x0a, 0x0d, 0x46, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x75, 0x6e,
	0x10, 0xa4, 0x9c, 0x01, 0x12, 0x18, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x73,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x75, 0x6e, 0x10, 0xa5, 0x9c, 0x01, 0x12, 0x0d,
	0x0a, 0x07, 0x46, 0x69, 0x73, 0x68, 0x48, 0x69, 0x74, 0x10, 0xa6, 0x9c, 0x01, 0x12, 0x12, 0x0a,
	0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x73, 0x68, 0x48, 0x69, 0x74, 0x10, 0xa7, 0x9c,
	0x01, 0x12, 0x0e, 0x0a, 0x08, 0x46, 0x69, 0x73, 0x68, 0x4b, 0x69, 0x6c, 0x6c, 0x10, 0xa8, 0x9c,
	0x01, 0x12, 0x13, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x73, 0x68, 0x4b, 0x69,
	0x6c, 0x6c, 0x10, 0xa9, 0x9c, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10,
	0xaa, 0x9c, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x73, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0xab, 0x9c, 0x01,
	0x12, 0x1d, 0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x73, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0xac, 0x9c, 0x01, 0x12,
	0x1c, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0xad, 0x9c, 0x01, 0x12, 0x19, 0x0a,
	0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x73, 0x68, 0x41, 0x64, 0x64, 0x5a, 0x68, 0x65,
	0x6e, 0x5a, 0x68, 0x75, 0x10, 0x84, 0x9d, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x73, 0x68, 0x41, 0x64, 0x64, 0x4c, 0x61, 0x42, 0x61, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x10, 0x85, 0x9d, 0x01, 0x12, 0x12, 0x0a, 0x0c, 0x46, 0x69, 0x73, 0x68, 0x50, 0x6c,
	0x61, 0x79, 0x4c, 0x61, 0x42, 0x61, 0x10, 0x86, 0x9d, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x73, 0x68, 0x4c, 0x61, 0x42, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x10, 0x87, 0x9d, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x73, 0x68, 0x42, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6e, 0x67, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x10, 0x88, 0x9d, 0x01, 0x12, 0x20, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x73,
	0x68, 0x41, 0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x50,
	0x61, 0x6e, 0x10, 0x89, 0x9d, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x46, 0x69, 0x73, 0x68, 0x50, 0x6c,
	0x61, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x50, 0x61, 0x6e,
	0x10, 0x8a, 0x9d, 0x01, 0x12, 0x23, 0x0a, 0x1d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x73,
	0x68, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x50, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x8b, 0x9d, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x73, 0x68, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x47, 0x75, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x10, 0x8c, 0x9d, 0x01, 0x12, 0x12, 0x0a, 0x0c, 0x46, 0x69, 0x73, 0x68, 0x50,
	0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x47, 0x75, 0x10, 0x8d, 0x9d, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x73, 0x68, 0x4d, 0x6f, 0x47, 0x75, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x10, 0x8e, 0x9d, 0x01, 0x12, 0x1f, 0x0a, 0x19, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x73, 0x68, 0x41, 0x64, 0x64, 0x4a, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x10, 0x8f, 0x9d, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x73, 0x68, 0x41, 0x64, 0x64, 0x41, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x10, 0x90, 0x9d, 0x01, 0x12, 0x20, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x73, 0x68, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x10, 0x91, 0x9d, 0x01, 0x12, 0x1f, 0x0a, 0x19, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x73, 0x68, 0x41, 0x64, 0x64, 0x48, 0x61, 0x72, 0x64, 0x65, 0x73, 0x73,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x10, 0x92, 0x9d, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x46, 0x69,
	0x73, 0x68, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x50, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x93, 0x9d, 0x01, 0x12, 0x1e, 0x0a,
	0x18, 0x46, 0x69, 0x73, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x50, 0x61, 0x6e, 0x10, 0x94, 0x9d, 0x01, 0x12, 0x23, 0x0a,
	0x1d, 0x46, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5a, 0x68, 0x75, 0x61, 0x6e, 0x50, 0x61, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x95,
	0x9d, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x46, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x64,
	0x42, 0x6c, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x96, 0x9d, 0x01, 0x12, 0x1b, 0x0a,
	0x15, 0x46, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x64, 0x42, 0x6c, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x97, 0x9d, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x6f, 0x64,
	0x42, 0x6c, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x10, 0x98, 0x9d, 0x01, 0x12, 0x1c, 0x0a,
	0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x73, 0x68, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47,
	0x6f, 0x64, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x10, 0x99, 0x9d, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x46,
	0x69, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x10, 0x9a, 0x9d, 0x01, 0x12, 0x18, 0x0a, 0x12, 0x46, 0x69, 0x73, 0x68, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x9b, 0x9d, 0x01,
	0x12, 0x1a, 0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6d,
	0x62, 0x6f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x9c, 0x9d, 0x01, 0x12, 0x0e, 0x0a, 0x08,
	0x53, 0x6c, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x10, 0xb0, 0xea, 0x01, 0x12, 0x11, 0x0a, 0x0b,
	0x53, 0x6c, 0x6f, 0x74, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0xb2, 0xea, 0x01, 0x2a,
	0x1f, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x75, 0x63, 0x63, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x01,
	0x2a, 0x38, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x6f, 0x74, 0x10, 0x02, 0x42, 0x22, 0x5a, 0x20, 0x62, 0x79,
	0x67, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_common_proto_goTypes = []interface{}{
	(CmdId)(0),               // 0: common.CmdId
	(ErrorCode)(0),           // 1: common.ErrorCode
	(RewardStatus)(0),        // 2: common.RewardStatus
	(*ReqUserKeepAlive)(nil), // 3: common.ReqUserKeepAlive
	(*RetUserKeepAlive)(nil), // 4: common.RetUserKeepAlive
	(*BaseCmd)(nil),          // 5: common.BaseCmd
	(*UserInfo)(nil),         // 6: common.UserInfo
	(*Item)(nil),             // 7: common.Item
}
var file_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserKeepAlive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetUserKeepAlive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
